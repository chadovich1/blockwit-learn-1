
                              Метод HTTP (англ. HTTP Method)
  Последовательность из любых символов, кроме управляющих и разделителей, указывающая на основную операцию над ресурсом.
Обычно метод представляет собой короткое английское слово, записанное заглавными буквами.
Обратите внимание, что название метода чувствительно к регистру.
   Сервер может использовать любые методы, не существует обязательных методов для сервера или клиента.
Если сервер не распознал указанный клиентом метод, то он должен вернуть статус 501 (Not Implemented)
    Если серверу метод известен, но он неприменим к конкретному ресурсу,
то возвращается сообщение с кодом 405 (Method Not Allowed).
В обоих случаях серверу следует включить в сообщение ответа заголовок Allow со списком поддерживаемых методов.
Кроме методов GET и HEAD, часто применяется метод POST.

    OPTIONS
    Используется для определения возможностей веб-сервера или параметров соединения для конкретного ресурса.
 В ответ серверу следует включить заголовок Allow со списком поддерживаемых методов.
 Также в заголовке ответа может включаться информация о поддерживаемых расширениях.

   GET
    Используется для запроса содержимого указанного ресурса.
  С помощью метода GET можно также начать какой-либо процесс.
  В этом случае в тело ответного сообщения следует включить информацию о ходе выполнения процесса.
  Клиент может передавать параметры выполнения запроса в URI целевого ресурса после символа «?»:
    GET /path/resource?param1=value1&param2=value2 HTTP/1.1
  Согласно стандарту HTTP, запросы типа GET считаются идемпотентными[2]
  Кроме обычного метода GET, различают ещё
  Условный GET — содержит заголовки If-Modified-Since, If-Match, If-Range и подобные;
  Частичный GET — содержит в запросе Range.
  Порядок выполнения подобных запросов определён стандартами отдельно.

   HEAD
    Аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело.
 Запрос HEAD обычно применяется для извлечения метаданных, проверки наличия ресурса (валидация URL)
 и чтобы узнать, не изменился ли он с момента последнего обращения.
 Заголовки ответа могут кэшироваться.
 При несовпадении метаданных ресурса с соответствующей информацией в кэше — копия ресурса помечается как устаревшая.

    POST
    Основная статья: POST (HTTP)
 Применяется для передачи пользовательских данных заданному ресурсу.
 Например, в блогах посетители обычно могут вводить свои комментарии к записям в HTML-форму,
 после чего они передаются серверу методом POST и он помещает их на страницу.
 При этом передаваемые данные (в примере с блогами — текст комментария) включаются в тело запроса.
 Аналогично с помощью метода POST обычно загружаются файлы на сервер.
    В отличие от метода GET, метод POST не считается идемпотентным[2],
 то есть многократное повторение одних и тех же запросов POST может возвращать разные результаты
 (например, после каждой отправки комментария будет появляться очередная копия этого комментария).
    При результате выполнения 200 (Ok) в тело ответа следует включить сообщение об итоге выполнения запроса.
 Если был создан ресурс, то серверу следует вернуть ответ 201 (Created) с указанием
 URI нового ресурса в заголовке Location.
 Сообщение ответа сервера на выполнение метода POST не кэшируется.


     PUT
    Применяется для загрузки содержимого запроса на указанный в запросе URI.
Если по заданному URI не существует ресурса, то сервер создаёт его и возвращает статус 201 (Created).
Если же ресурс был изменён, то сервер возвращает 200 (Ok) или 204 (No Content).
Сервер не должен игнорировать некорректные заголовки Content-*, передаваемые клиентом вместе с сообщением.
Если какой-то из этих заголовков не может быть распознан или недопустим при текущих условиях,
то необходимо вернуть код ошибки 501 (Not Implemented).
  Фундаментальное различие методов POST и PUT заключается в понимании предназначений URI ресурсов.
Метод POST предполагает, что по указанному URI будет производиться обработка передаваемого клиентом содержимого.
Используя PUT, клиент предполагает, что загружаемое содержимое соответствует находящемуся по данному URI ресурсу.
Сообщения ответов сервера на метод PUT не кэшируются.

    PATCH
Аналогично PUT, но применяется только к фрагменту ресурса.

    DELETE
Удаляет указанный ресурс.

    TRACE
Возвращает полученный запрос так, что клиент может увидеть,
какую информацию промежуточные серверы добавляют или изменяют в запросе.

    CONNECT
   Преобразует соединение запроса в прозрачный TCP/IP-туннель,
обычно чтобы содействовать установлению защищённого SSL-соединения через нешифрованный.

                                   Коды состояния
    Основная статья: Список кодов состояния HTTP
Код состояния является частью первой строки ответа сервера. Он представляет собой целое число из трёх цифр[3].
 Первая цифра указывает на класс состояния.
 За кодом ответа обычно следует отделённая пробелом поясняющая фраза на английском языке,
 которая разъясняет человеку причину именно такого ответа.
Успех
Сообщения данного класса информируют о случаях успешного принятия и обработки запроса клиента.
В зависимости от статуса сервер может ещё передать заголовки и тело сообщения.

   200 OK — успешный запрос. Если клиентом были запрошены какие-либо данные,
то они находятся в заголовке и/или теле сообщения. Появился в HTTP/1.0.
   201 Created — в результате успешного выполнения запроса был создан новый ресурс.
   Сервер может указать адреса (их может быть несколько) созданного ресурса в теле ответа,
при этом предпочтительный адрес указывается в заголовке Location.
Серверу рекомендуется указывать в теле ответа характеристики созданного ресурса и его адреса,
формат тела ответа определяется заголовком Content-Type.
При обработке запроса новый ресурс должен быть создан до отправки ответа клиенту,
иначе следует использовать ответ с кодом 202. Появился в HTTP/1.0.
   202 Accepted — запрос был принят на обработку, но она не завершена.
   Клиенту не обязательно дожидаться окончательной передачи сообщения,
так как может быть начат очень долгий процесс. Появился в HTTP/1.0.
   203 Non-Authoritative Information — аналогично ответу 200,
но в этом случае передаваемая информация была взята не из первичного источника
(резервной копии, другого сервера и т. д.) и поэтому может быть неактуальной. Появился в HTTP/1.1.
   204 No Content — сервер успешно обработал запрос,
но в ответе были переданы только заголовки без тела сообщения.
Клиент не должен обновлять содержимое документа, но может применить к нему полученные метаданные.
Появился в HTTP/1.0.
   205 Reset Content — сервер обязывает клиента сбросить введённые пользователем данные.
Тела сообщения сервер при этом не передаёт и документ обновлять не обязательно. Появился в HTTP/1.1.
   206 Partial Content — сервер удачно выполнил частичный GET-запрос,
возвратив только часть сообщения. В заголовке Content-Range сервер указывает байтовые диапазоны содержимого.
Особое внимание при работе с подобными ответами следует уделить кэшированию. Появился в HTTP/1.1. (подробнее…)
   207 Multi-Status — сервер передаёт результаты выполнения сразу нескольких независимых операций.
Они помещаются в само тело сообщения в виде XML-документа с объектом multistatus.
Не рекомендуется размещать в этом объекте статусы из серии 1xx из-за бессмысленности и избыточности.
Появился в WebDAV.
   208 Already Reported — члены привязки DAV уже были перечислены в
предыдущей части (multistatus) ответа и не включаются снова.
   226 IM Used — заголовок A-IM от клиента был успешно принят и
сервер возвращает содержимое с учётом указанных параметров. Введено в RFC 3229 для
дополнения протокола HTTP поддержкой дельта-кодирования.


















